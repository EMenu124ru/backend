openapi: 3.0.2

info:
  title: EMenu
  version: 0.1.0

tags:
  - name: auth
    description: "Auth namespace"
  - name: clients
    description: "Client namespace"
  - name: employees
    description: "Employee namespace"
  - name: orders
    description: "Order namespace"
  - name: categories
    description: "Category namespace"
  - name: dishes
    description: "Dish namespace"
  - name: dish-images
    description: "Dish image namespace"
  - name: reviews
    description: "Review namespace"
  - name: review-images
    description: "Review image namespace"
  - name: restaurants
    description: "Restaurant namespace"
  - name: reservations
    description: "Reservation namespace"
  - name: orderAndDishes
    description: "OrderAndDish namespace"
  - name: stopLists
    description: "StopList namespace"

paths:
  "/api/v1/clients/login":
    post:
      tags:
        - auth
        - clients
      summary: "Login client"
      requestBody:
        $ref: "#/components/requestBodies/LoginRequestBodyClient"
      responses:
        "200":
          $ref: "#/components/responses/TokenObtain200"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"

  "/api/v1/staff/login":
    post:
      tags:
        - auth
        - employees
      summary: "Login employee"
      requestBody:
        $ref: "#/components/requestBodies/LoginRequestBodyEmployee"
      responses:
        "200":
          $ref: "#/components/responses/TokenObtain200"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
  
  "/api/v1/staff/me":
    get:
      tags:
        - employees
      summary: "Retrieve employee"
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/Employee200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/auth/token/refresh":
    post:
      tags:
        - auth
        - employees
        - clients
      summary: "Refresh token"
      requestBody:
        $ref: "#/components/requestBodies/TokenRefreshRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/TokenRefresh200"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"

  "/api/v1/clients":
    post:
      tags:
        - clients
      summary: "Sign up client"
      requestBody:
        $ref: "#/components/requestBodies/SignUpRequestBodyClient"
      responses:
        "201":
          $ref: "#/components/responses/ClientCreate201"
        "400":
          $ref: "#/components/responses/BadRequest400"
  
  "/api/v1/clients/me":
    get:
      tags:
        - clients
      summary: "Get client"
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/Client200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/clients/{client_id}":
    get:
      tags:
        - clients
      summary: "Get client"
      parameters:
        - name: client_id
          in: path
          schema:
            type: number
          description: "Id клиента"
          required: true
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/Client200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

    patch:
      tags:
        - clients
      summary: "Update client"
      parameters:
        - name: client_id
          in: path
          schema:
            type: number
          description: "Id клиента"
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SignUpRequestBodyClient"
      responses:
        "200":
          $ref: "#/components/responses/Client200"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

    delete:
      tags:
        - clients
      summary: "Delete client"
      parameters:
        - name: client_id
          in: path
          schema:
            type: number
          description: "Id клиента"
          required: true
      security:
        - bearerAuth: []
      responses:
        "204":
          description: "No Content"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/categories":
    post:
      tags:
        - categories
      summary: "Create category"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CategoryCreateBody"
      responses:
        "201":
          $ref: "#/components/responses/CategoryCreate201"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

    get:
      tags:
        - categories
      summary: "Get list categories"
      parameters:
        - in: query
          name: page
          schema:
            type: number
            nullable: true
          description: "Номер страницы"
          required: false
        - in: query
          name: page_size
          schema:
            type: number
            nullable: true
          description: "Количество элементов на странице"
          required: false
      responses:
        "200":
          $ref: "#/components/responses/CategoryList200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

  "/api/v1/categories/{category_id}":
    get:
      tags:
        - categories
      summary: "Get category"
      parameters:
        - name: category_id
          in: path
          schema:
            type: number
          description: "Id категории"
          required: true
      responses:
        "200":
          $ref: "#/components/responses/Category200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

    patch:
      tags:
        - categories
      summary: "Update category"
      parameters:
        - name: category_id
          in: path
          schema:
            type: number
          description: "Id категории"
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CategoryCreateBody"
      responses:
        "200":
          $ref: "#/components/responses/Category200"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

    delete:
      tags:
        - categories
      summary: "Delete category"
      parameters:
        - name: category_id
          in: path
          schema:
            type: number
          description: "Id категории"
          required: true
      security:
        - bearerAuth: []
      responses:
        "204":
          description: "No Content"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/categories/{category_id}/dishes":
    get:
      tags:
        - categories
        - dishes
      summary: "Get dishes of some category"
      parameters:
        - name: category_id
          in: path
          schema:
            type: number
          description: "Id категории"
          required: true
        - in: query
          name: page
          schema:
            type: number
            nullable: true
          description: "Номер страницы"
          required: false
        - in: query
          name: page_size
          schema:
            type: number
            nullable: true
          description: "Количество элементов на странице"
          required: false
      responses:
        "200":
          $ref: "#/components/responses/DishList200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/orders":
    post:
      tags:
        - orders
      summary: "Create order"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/OrderCreateBody"
      responses:
        "201":
          $ref: "#/components/responses/OrderCreate201"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

    get:
      tags:
        - orders
      summary: "Get list orders"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: number
            nullable: true
          description: "Номер страницы"
          required: false
        - in: query
          name: page_size
          schema:
            type: number
            nullable: true
          description: "Количество элементов на странице"
          required: false
      responses:
        "200":
          $ref: "#/components/responses/OrderList200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

  "/api/v1/orders/{order_id}":
    get:
      tags:
        - orders
      summary: "Get order"
      parameters:
        - name: order_id
          in: path
          schema:
            type: number
          description: "Id заказа"
          required: true
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/Order200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

    patch:
      tags:
        - orders
      summary: "Update order"
      parameters:
        - name: order_id
          in: path
          schema:
            type: number
          description: "Id заказа"
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/OrderCreateBody"
      responses:
        "200":
          $ref: "#/components/responses/Order200"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/dishes":
    post:
      tags:
        - dishes
      summary: "Create dish"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/DishCreateBody"
      responses:
        "201":
          $ref: "#/components/responses/DishCreate201"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

    get:
      tags:
        - dishes
      summary: "Get list dishes"
      parameters:
        - in: query
          name: page
          schema:
            type: number
            nullable: true
          description: "Номер страницы"
          required: false
        - in: query
          name: page_size
          schema:
            type: number
            nullable: true
          description: "Количество элементов на странице"
          required: false
      responses:
        "200":
          $ref: "#/components/responses/DishList200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

  "/api/v1/dishes/{dish_id}":
    get:
      tags:
        - dishes
      summary: "Get dish"
      parameters:
        - name: dish_id
          in: path
          schema:
            type: number
          description: "Id блюда"
          required: true
      responses:
        "200":
          $ref: "#/components/responses/Dish200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

    patch:
      tags:
        - dishes
      summary: "Update dish"
      parameters:
        - name: dish_id
          in: path
          schema:
            type: number
          description: "Id блюда"
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/DishCreateBody"
      responses:
        "200":
          $ref: "#/components/responses/Dish200"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

    delete:
      tags:
        - dishes
      summary: "Delete dish"
      parameters:
        - name: dish_id
          in: path
          schema:
            type: number
          description: "Id блюда"
          required: true
      security:
        - bearerAuth: []
      responses:
        "204":
          description: "No Content"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/dishes/{dish_id}/orders":
    get:
      tags:
        - dishes
      summary: "Get orders of some dish"
      parameters:
        - name: dish_id
          in: path
          schema:
            type: number
          description: "Id блюда"
          required: true
        - in: query
          name: page
          schema:
            type: number
            nullable: true
          description: "Номер страницы"
          required: false
        - in: query
          name: page_size
          schema:
            type: number
            nullable: true
          description: "Количество элементов на странице"
          required: false
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/OrderList200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/dishes/{dish_id}/reviews":
    get:
      tags:
        - dishes
        - reviews
      summary: "Get reviews of some dish"
      parameters:
        - name: dish_id
          in: path
          schema:
            type: number
          description: "Id блюда"
          required: true
        - in: query
          name: page
          schema:
            type: number
            nullable: true
          description: "Номер страницы"
          required: false
        - in: query
          name: page_size
          schema:
            type: number
            nullable: true
          description: "Количество элементов на странице"
          required: false
      responses:
        "200":
          $ref: "#/components/responses/ReviewList200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/dishes/{dish_id}/images":
    post:
      tags:
        - dishes
        - dish-images
      summary: "Create dish image"
      parameters:
        - name: dish_id
          in: path
          schema:
            type: number
          description: "Id блюда"
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/DishImageCreateBody"
      responses:
        "201":
          $ref: "#/components/responses/DishImage200"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

  "/api/v1/dish-images/{dish_image_id}":
    delete:
      tags:
        - dish-images
      summary: "Delete dish image"
      parameters:
        - name: dish_image_id
          in: path
          schema:
            type: number
          description: "Id фото блюда"
          required: true
      security:
        - bearerAuth: []
      responses:
        "204":
          description: "No Content"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/reservations":
    post:
      tags:
        - reservations
      summary: "Create reservation"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/ReservationRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/ReservationCreate201"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

    get:
      tags:
        - reservations
      summary: "Get list reservations"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: number
            nullable: true
          description: "Номер страницы"
          required: false
        - in: query
          name: page_size
          schema:
            type: number
            nullable: true
          description: "Количество элементов на странице"
          required: false
      responses:
        "200":
          $ref: "#/components/responses/ReservationList200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

  "/api/v1/reservations/{reservation_id}":
    get:
      tags:
        - reservations
      summary: "Get reservation"
      parameters:
        - name: reservation_id
          in: path
          schema:
            type: number
          required: true
          description: "Id бронирования"
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/Reservation200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

    patch:
      tags:
        - reservations
      summary: "Update reservation"
      parameters:
        - name: reservation_id
          in: path
          schema:
            type: number
          description: "Id бронирования"
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/ReservationRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/Reservation200"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/order-and-dishes":
    post:
      tags:
        - orderAndDishes
      summary: "Create orderAndDish"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/OrderAndDishRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/OrderAndDishCreate201"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

  "/api/v1/order-and-dishes/{orderAndDish_id}":
    patch:
      tags:
        - orderAndDishes
      summary: "Update orderAndDish"
      parameters:
        - name: orderAndDish_id
          in: path
          schema:
            type: number
          description: "Id связки ресторана и заказа"
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/OrderAndDishRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/OrderAndDish200"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/stop-list":
    post:
      tags:
        - stopLists
      summary: "Create stopList item"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/StopListRequestBody"
      responses:
        "201":
          $ref: "#/components/responses/StopListCreate201"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

    get:
      tags:
        - stopLists
      summary: "Get list stopList items"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: number
            nullable: true
          description: "Номер страницы"
          required: false
        - in: query
          name: page_size
          schema:
            type: number
            nullable: true
          description: "Количество элементов на странице"
          required: false
      responses:
        "200":
          $ref: "#/components/responses/StopListList200"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

  "/api/v1/stop-list/{stopList_id}":
    delete:
      tags:
        - stopLists
      summary: "Delete stopList"
      parameters:
        - name: stopList_id
          in: path
          schema:
            type: number
          description: "Id элемента из стоп листа"
          required: true
      security:
        - bearerAuth: []
      responses:
        "204":
          description: "No Content"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/reviews":
    post:
      tags:
        - reviews
      summary: "Create reviews"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/ReviewCreateBody"
      responses:
        "201":
          $ref: "#/components/responses/ReviewCreate201"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

  "/api/v1/reviews/{review_id}":
    get:
      tags:
        - reviews
      summary: "Get review"
      parameters:
        - name: review_id
          in: path
          schema:
            type: number
          description: "Id отзыва"
          required: true
      responses:
        "200":
          $ref: "#/components/responses/Review200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

    patch:
      tags:
        - reviews
      summary: "Update review"
      parameters:
        - name: review_id
          in: path
          schema:
            type: number
          description: "Id отзыва"
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/ReviewCreateBody"
      responses:
        "200":
          $ref: "#/components/responses/Review200"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

    delete:
      tags:
        - reviews
      summary: "Delete review"
      parameters:
        - name: review_id
          in: path
          schema:
            type: number
          description: "Id отзыва"
          required: true
      security:
        - bearerAuth: []
      responses:
        "204":
          description: "No Content"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/reviews/{review_id}/images":
    post:
      tags:
        - reviews
        - review-images
      summary: "Create review-image"
      parameters:
        - name: review_id
          in: path
          schema:
            type: number
          description: "Id отзыва"
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/ReviewImageCreateBody"
      responses:
        "201":
          $ref: "#/components/responses/ReviewImageCreate201"
        "400":
          $ref: "#/components/responses/BadRequest400"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"

  "/api/v1/review-images/{review_image_id}":
    delete:
      tags:
        - review-images
      summary: "Delete review-image"
      parameters:
        - name: review_image_id
          in: path
          schema:
            type: number
          description: "Id картинки"
          required: true
      security:
        - bearerAuth: []
      responses:
        "204":
          description: "No Content"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "403":
          $ref: "#/components/responses/Forbidden403"
        "404":
          $ref: "#/components/responses/NotFound404"

  "/api/v1/restaurants":
    get:
      tags:
        - restaurants
      summary: "Get list restaurants"
      parameters:
        - in: query
          name: page
          schema:
            type: number
            nullable: true
          description: "Номер страницы"
          required: false
        - in: query
          name: page_size
          schema:
            type: number
            nullable: true
          description: "Количество элементов на странице"
          required: false
      responses:
        "200":
          $ref: "#/components/responses/RestaurantList200"
        "401":
          $ref: "#/components/responses/Unauthorized401"

  "/api/v1/restaurants/{restaurant_id}/reviews":
    get:
      tags:
        - restaurants
        - reviews
      summary: "Get reviews of restaurant"
      parameters:
        - name: restaurant_id
          in: path
          schema:
            type: number
          required: true
          description: "Id ресторана"
      responses:
        "200":
          $ref: "#/components/responses/ReviewList200"
        "401":
          $ref: "#/components/responses/Unauthorized401"
        "404":
          $ref: "#/components/responses/NotFound404"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ClientBase:
      type: object
      properties:
        id:
          type: number
        first_name:
          type: string
        last_name:
          type: string
        surname:
          type: string
        bonuses:
          type: number
        phone_number:
          type: string
    
    EmployeeBase:
      type: object
      properties:
        id:
          type: number
        first_name:
          type: string
        last_name:
          type: string
        surname:
          type: string
        role:
          type: string
        restaurant:
          type: number

    ClientCreateBase:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        surname:
          type: string
        password:
          type: string
        phone_number:
          type: string

    OrderBase:
      type: object
      properties:
        id:
          type: number
        status:
          type: string
        price:
          type: string
        comment:
          type: string
        employee:
          allOf:
            - $ref: "#/components/schemas/EmployeeBase"
          nullable: true
        client:
          allOf:
            - $ref: "#/components/schemas/ClientBase"
          nullable: true
        dishes:
          type: array
          items:
            $ref: "#/components/schemas/OrderAndDishBase"

    OrderCreateBase:
      type: object
      properties:
        status:
          type: string
        comment:
          type: string
        employee:
          type: number
        client:
          type: number
          nullable: true
        dishes:
          type: array
          items:
            type: object
            properties:
              dish:
                type: number
              comment:
                type: string

    CategoryBase:
      type: object
      properties:
        id:
          type: number
        name:
          type: string

    CategoryCreateBase:
      type: object
      properties:
        name:
          type: string

    DishImageBase:
      type: object
      properties:
        id:
          type: number
        image:
          type: string

    DishImageBundleCreateBase:
      type: object
      properties:
        images:
          type: array
          items:
            type: string

    DishImageCreateBase:
      type: object
      properties:
        images:
          type: array
          items:
            type: string

    DishBase:
      type: object
      properties:
        id:
          type: number
        category:
          $ref: "#/components/schemas/CategoryBase"
        name:
          type: string
        description:
          type: string
        short_description:
          type: string
        price:
          type: string
        compound:
          type: string
        weight:
          type: string
        images:
          type: array
          items:
            $ref: "#/components/schemas/DishImageBase"

    DishCreateBase:
      type: object
      properties:
        category:
          type: number
        name:
          type: string
        description:
          type: string
        short_description:
          type: string
        price:
          type: string
        compound:
          type: string
        weight:
          type: string
        images:
          type: array
          items:
            type: string

    ReviewImageCreateBase:
      type: object
      properties:
        images:
          type: array
          items:
            type: string

    ReviewImageBase:
      type: object
      properties:
        id:
          type: number
        image:
          type: string

    ReviewCreateBase:
      type: object
      properties:
        review:
          type: string
        mark:
          type: string
        dish:
          type: number
          nullable: true
        restaurant:
          type: number
          nullable: true
        images:
          type: array
          items:
            type: string

    ReviewBase:
      type: object
      properties:
        id:
          type: number
        review:
          type: string
        mark:
          type: string
        client:
          $ref: "#/components/schemas/ClientBase"
        images:
          type: array
          items:
            $ref: "#/components/schemas/ReviewImageBase"

    ReservationCreateBase:
      type: object
      properties:
        arrival_time:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          nullable: true
        restaurant:
          type: number

    ReservationBase:
      type: object
      properties:
        id:
          type: number
        arrival_time:
          type: string
          format: date-time
        status:
          type: string
        restaurant:
          $ref: "#/components/schemas/RestaurantReservationBase"
        place:
          allOf:
          - $ref: "#/components/schemas/PlaceBase"
          nullable: true
        client:
          allOf:
          - $ref: "#/components/schemas/ClientBase"
          nullable: true
        orders:
          type: array
          items:
            $ref: "#/components/schemas/OrderBase"

    ScheduleBase:
      type: object
      properties:
        id:
          type: number
        week_day:
          type: number
        time_open:
          type: string
          format: time
        time_close:
          type: string
          format: time

    PlaceBase:
      type: object
      properties:
        id:
          type: number
        place:
          type: string

    RestaurantBase:
      type: object
      properties:
        id:
          type: number
        address:
          type: string
        schedules:
          type: array
          items:
            $ref: "#/components/schemas/ScheduleBase"
        places:
          type: array
          items:
            $ref: "#/components/schemas/PlaceBase"
    
    RestaurantReservationBase:
      type: object
      properties:
        id:
          type: number
        address:
          type: string

    OrderAndDishCreateBase:
      type: object
      properties:
        status:
          type: string
        order:
          type: number
          description: "Id заказа"
        dish:
          type: number
          description: "Id блюда"
        employee:
          type: number
          description: "Id исполняющего работника"
          nullable: true
        comment:
          type: string

    OrderAndDishBase:
      type: object
      properties:
        id:
          type: number
        status:
          type: string
        order:
          type: number
        dish:
          $ref: "#/components/schemas/DishBase"
        comment:
          type: string
        employee:
          allOf:
          - $ref: "#/components/schemas/EmployeeBase"
          description: "Id исполняющего работника"
          nullable: true

    StopListCreateBase:
      type: object
      properties:
        dish:
          type: number
          description: "Id блюда"
        restaurant:
          type: number
          description: "Id ресторана"

    StopListBase:
      type: object
      properties:
        dish:
          type: number
          description: "Id блюда"
        restaurant:
          type: number
          description: "Id ресторана"

  requestBodies:
    ReviewCreateBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReviewCreateBase"
      required: true

    ReviewImageCreateBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReviewImageCreateBase"
      required: true

    LoginRequestBodyClient:
      content:
        application/json:
          schema:
            type: object
            properties:
              phone_number:
                type: string
              password:
                type: string
      required: true

    SignUpRequestBodyClient:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientCreateBase"
      required: true

    LoginRequestBodyEmployee:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      required: true

    OrderCreateBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderCreateBase"
      required: true

    DishCreateBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DishCreateBase"
      required: true

    DishImageBundleCreateBody:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DishImageBundleCreateBase"
      required: true

    DishImageCreateBody:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DishImageCreateBase"
      required: true

    CategoryCreateBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CategoryCreateBase"
      required: true

    TokenObtainRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      required: true

    TokenRefreshRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              refresh:
                type: string
      required: true

    ReservationRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReservationCreateBase"
      required: true

    OrderAndDishRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderAndDishCreateBase"
      required: true

    StopListRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/StopListCreateBase"
      required: true

  responses:
    TokenObtain200:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              access:
                type: string
                description: "access token"
              refresh:
                type: string
                description: "refresh token"

    TokenObtain400:
      description: "Bad request"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: "No active account found with the given credentials"

    TokenRefresh200:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              access:
                type: string
                description: "access token"
              refresh:
                type: string
                description: "refresh token"

    TokenRefresh400:
      description: "Bad request"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: "Token is invalid or expired"
              code:
                type: string
                example: "token_not_valid"

    OrderCreate201:
      description: "Order created"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderBase"

    OrderList200:
      description: "Order list"
      content:
        application/json:
          schema:
            type: object
            properties:
              links:
                type: object
                properties:
                  next:
                    type: string
                    format: url
                    nullable: true
                  previous:
                    type: string
                    format: url
                    nullable: true
              count:
                type: number
              total_pages:
                type: number
              results:
                type: array
                items:
                  $ref: "#/components/schemas/OrderBase"

    Order200:
      description: "Order item"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderBase"

    Client200:
      description: "Client item"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientBase"
    
    ClientCreate201:
      description: "Client created"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientBase"
    
    Employee200:
      description: "Employee item"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EmployeeBase"

    CategoryCreate201:
      description: "Category created"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CategoryBase"

    CategoryList200:
      description: "Category list"
      content:
        application/json:
          schema:
            type: object
            properties:
              links:
                type: object
                properties:
                  next:
                    type: string
                    format: url
                    nullable: true
                  previous:
                    type: string
                    format: url
                    nullable: true
              count:
                type: number
              total_pages:
                type: number
              results:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryBase"

    Category200:
      description: "Category item"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CategoryBase"

    DishCreate201:
      description: "Dish create"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DishBase"

    DishList200:
      description: "Dish list"
      content:
        application/json:
          schema:
            type: object
            properties:
              links:
                type: object
                properties:
                  next:
                    type: string
                    format: url
                    nullable: true
                  previous:
                    type: string
                    format: url
                    nullable: true
              count:
                type: number
              total_pages:
                type: number
              results:
                type: array
                items:
                  $ref: "#/components/schemas/DishBase"

    Dish200:
      description: "Dish item"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DishBase"

    DishImageCreate201:
      description: "Dish image create"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DishImageBase"

    DishImage200:
      description: "Dish image get"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DishImageBase"

    ReviewCreate201:
      description: "Review create"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReviewBase"

    Review200:
      description: "Review get"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReviewBase"

    ReviewList200:
      description: "List of reviews"
      content:
        application/json:
          schema:
            type: object
            properties:
              links:
                type: object
                properties:
                  next:
                    type: string
                    format: url
                    nullable: true
                  previous:
                    type: string
                    format: url
                    nullable: true
              count:
                type: number
              total_pages:
                type: number
              results:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewBase"

    ReviewImageCreate201:
      description: "Review image create"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ReviewImageBase"

    ReservationList200:
      description: "List of reservation"
      content:
        application/json:
          schema:
            type: object
            properties:
              links:
                type: object
                properties:
                  next:
                    type: string
                    format: url
                    nullable: true
                  previous:
                    type: string
                    format: url
                    nullable: true
              count:
                type: number
              total_pages:
                type: number
              results:
                type: array
                items:
                  $ref: "#/components/schemas/ReservationBase"

    ReservationCreate201:
      description: "Reservation create"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReservationBase"
    
    Reservation200:
      description: "Reservation get"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReservationBase"

    OrderAndDishCreate201:
      description: "OrderAndDish create"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderAndDishBase"

    OrderAndDish200:
      description: "OrderAndDish get"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderAndDishBase"

    StopListCreate201:
      description: "StopList create"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/StopListBase"

    StopListList200:
      description: "StopList get"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/StopListBase"

    RestaurantList200:
      description: "Restaurants list get"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RestaurantBase"

    Restaurant200:
      description: "Restaurant get"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RestaurantBase"

    BadRequest400:
      description: "BadRequest"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: array
                      items:
                        type: string

    Unauthorized401:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
    
    Forbidden403:
      description: "Forbidden"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string

    NotFound404:
      description: "NotFound"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
