openapi: 3.0.2

info:
  title: EMenu
  version: 0.1.0

tags:
  - name: auth
    description: "Auth namespace"
  - name: clients
    description: "Client namespace"
  - name: employees
    description: "Employee namespace"
  - name: orders
    description: "Order namespace"
  - name: categories
    description: "Category namespace"
  - name: dishes
    description: "Dish namespace"
  - name: reviews
    description: "Review namespace"
  - name: restaurants
    description: "Restaurant namespace"

paths:
  "/api/v1/login/client/":
    post:
      tags:
        - auth
        - users
        - clients
      summary: "Login client"
      requestBody:
        $ref: "#/components/requestBodies/LoginRequestBodyClient"
      responses:
        "200":
          $ref: "#/components/responses/TokenObtain200"
        "400":
          $ref: "#/components/responses/TokenObtain400"

  "/api/v1/signup/client/":
    post:
      tags:
        - auth
        - users
        - clients
      summary: "Sign up client"
      requestBody:
        $ref: "#/components/requestBodies/SignUpRequestBodyClient"
      responses:
        "200":
          $ref: "#/components/responses/TokenObtain200"
        "400":
          $ref: "#/components/responses/TokenObtain400"

  "/api/v1/login/employee/":
    post:
      tags:
        - auth
        - users
        - employees
      summary: "Login employee"
      requestBody:
        $ref: "#/components/requestBodies/LoginRequestBodyEmployee"
      responses:
        "200":
          $ref: "#/components/responses/TokenObtain200"
        "400":
          $ref: "#/components/responses/TokenObtain400"

  "/api/v1/auth/token/refresh/":
    post:
      tags:
        - auth
        - users
        - employees
        - clients
      summary: "Refresh token"
      requestBody:
        $ref: "#/components/requestBodies/TokenRefreshRequestBody"
      responses:
        "200":
          $ref: "#/components/responses/TokenRefresh200"
        "400":
          $ref: "#/components/responses/TokenRefresh400"

  "/api/v1/categories/":
    post:
      tags:
        - categories
      summary: "Create category"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CategoryCreateBody"
      responses:
        "201":
          $ref: "#/components/responses/CategoryCreate201"
        "400":
          $ref: "#/components/responses/CategoryCreate400"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"

    get:
      tags:
        - categories
      summary: "Get list categories"
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/CategoryList200"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"

  "/api/v1/categories/{category_id}/":
    get:
      tags:
        - categories
      summary: "Get category"
      parameters:
        - name: category_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/Category200"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"

    patch:
      tags:
        - categories
      summary: "Update category"
      parameters:
        - name: category_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CategoryCreateBody"
      responses:
        "200":
          $ref: "#/components/responses/Category200"
        "400":
          $ref: "#/components/responses/CategoryCreate400"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"

    delete:
      tags:
        - categories
      summary: "Delete category"
      parameters:
        - name: category_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"

  "/api/v1/orders/":
    post:
      tags:
        - orders
      summary: "Create order"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/OrderCreateBody"
      responses:
        "201":
          $ref: "#/components/responses/OrderCreate201"
        "400":
          $ref: "#/components/responses/OrderCreate400"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"

    get:
      tags:
        - orders
      summary: "Get list orders"
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/OrderList200"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"

  "/api/v1/orders/{order_id}/":
    get:
      tags:
        - orders
      summary: "Get order"
      parameters:
        - name: order_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/Order200"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"

    patch:
      tags:
        - orders
      summary: "Update order"
      parameters:
        - name: order_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/OrderCreateBody"
      responses:
        "200":
          $ref: "#/components/responses/Order200"
        "400":
          $ref: "#/components/responses/OrderCreate400"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"

    delete:
      tags:
        - orders
      summary: "Delete order"
      parameters:
        - name: order_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"

  "/api/v1/dishes/":
    post:
      tags:
        - dishes
      summary: "Create dish"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/DishCreateBody"
      responses:
        "201":
          $ref: "#/components/responses/DishCreate201"
        "400":
          $ref: "#/components/responses/DishCreate400"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"

    get:
      tags:
        - dishes
      summary: "Get list dishes"
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/DishList200"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"

  "/api/v1/dishes/{dish_id}/":
    get:
      tags:
        - dishes
      summary: "Get dish"
      parameters:
        - name: dish_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/Dish200"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"

    patch:
      tags:
        - dishes
      summary: "Update dish"
      parameters:
        - name: dish_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/DishCreateBody"
      responses:
        "200":
          $ref: "#/components/responses/Dish200"
        "400":
          $ref: "#/components/responses/DishCreate400"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"

    delete:
      tags:
        - dishes
      summary: "Delete dish"
      parameters:
        - name: dish_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"

  "/api/v1/dishes/{dish_id}/images/":
    post:
      tags:
        - dishes
      summary: "Add dish image"
      parameters:
        - name: dish_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/DishImageCreateBody"
      responses:
        "201":
          $ref: "#/components/responses/DishImageCreate201"
        "400":
          $ref: "#/components/responses/DishImageCreate400"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
    
    get:
      tags:
        - dishes
      summary: "Get list dish images"
      security:
        - bearerAuth: []
      parameters:
        - name: dish_id
          in: path
          schema:
            type: number
          required: true
      responses:
        "200":
          $ref: "#/components/responses/DishImages200"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"

  "/api/v1/dishes/{dish_id}/images/{dish_image_id}/":
    delete:
      tags:
        - dishes
      summary: "Delete dish image"
      parameters:
        - name: dish_id
          in: path
          schema:
            type: number
          required: true
        - name: dish_image_id
          in: path
          schema:
            type: number
          required: true
      security:
        - bearerAuth: []
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "403":
          description: "Forbidden"
        "404":
          description: "Not Found"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserBase:
      type: object
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        username:
          type: string
        password:
          type: string

    ClientCreateBase:
      type: object
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        username:
          type: string
        password:
          type: string
        phone_number:
          type: string

    OptionalClientBase:
      type: object
      nullable: true
      properties:
        user:
          $ref: "#/components/schemas/UserBase"
        bonuses:
          type: number
        phone_number:
          type: string

    OptionalEmployeeBase:
      type: object
      nullable: true
      properties:
        user:
          $ref: "#/components/schemas/UserBase"
        role:
          type: string
        restaurant:
          $ref: "#/components/schemas/RestaurantBase"

    OrderBase:
      type: object
      properties:
        status:
          type: string
        price:
          type: number
        comment:
          type: string
        employee:
          $ref: "#/components/schemas/OptionalEmployeeBase"
        client:
          $ref: "#/components/schemas/OptionalClientBase"
        place_number:
          type: number
        dishes:
          type: array
          items:
            $ref: "#/components/schemas/DishBase"

    OrderCreateBase:
      type: object
      properties:
        status:
          type: string
        price:
          type: number
        comment:
          type: string
        employee:
          type: number
        client:
          type: number
          nullable: true
        place_number:
          type: number

    CategoryBase:
      type: object
      properties:
        name:
          type: string
        dishes:
          type: array
          items:
            $ref: "#/components/schemas/DishBase"

    CategoryCreateBase:
      type: object
      properties:
        name:
          type: string

    DishBase:
      type: object
      properties:
        category:
          $ref: "#/components/schemas/CategoryBase"
        name:
          type: string
        description:
          type: string
        short_description:
          type: string
        price:
          type: number
        compound:
          type: string
        weight:
          type: number
        reviews:
          type: array
          items:
            $ref: "#/components/schemas/ReviewBase"
        orders:
          type: array
          items:
            $ref: "#/components/schemas/OrderBase"
        images:
          type: array
          items:
            $ref: "#/components/schemas/DishImageBase"

    DishCreateBase:
      type: object
      properties:
        category:
          type: number
        name:
          type: string
        description:
          type: string
        short_description:
          type: string
        price:
          type: number
        compound:
          type: string
        weight:
          type: number

    DishImageBase:
      type: object
      properties:
        image:
          type: string
        dish:
          $ref: "#/components/schemas/DishBase"

    DishImageCreateBase:
      type: object
      properties:
        images:
          type: array
          items:
            type: string

    RestaurantBase:
      type: object
      properties:
        address:
          type: string
        reviews:
          type: array
          items:
            $ref: "#/components/schemas/ReviewBase"

    ReviewBase:
      type: object
      properties:
        review:
          type: string
        mark:
          type: number
        client:
          $ref: "#/components/schemas/OptionalClientBase"

  requestBodies:
    LoginRequestBodyClient:
      content:
        application/json:
          schema:
            type: object
            properties:
              phone_number:
                type: string
              password:
                type: string
      required: true

    SignUpRequestBodyClient:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientCreateBase"
      required: true

    LoginRequestBodyEmployee:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      required: true

    OrderCreateBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderCreateBase"
      required: true

    DishCreateBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DishCreateBase"
      required: true

    DishImageCreateBody:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DishImageCreateBase"
      required: true

    CategoryCreateBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CategoryCreateBase"
      required: true

    TokenObtainRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
      required: true

    TokenRefreshRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              refresh:
                type: string
      required: true

  responses:
    TokenObtain200:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              access:
                type: string
                description: "access token"
              refresh:
                type: string
                description: "refresh token"

    TokenObtain400:
      description: "Bad request"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: "No active account found with the given credentials"

    TokenRefresh200:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              access:
                type: string
                description: "access token"
              refresh:
                type: string
                description: "refresh token"

    TokenRefresh400:
      description: "Bad request"
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: "Token is invalid or expired"
              code:
                type: string
                example: "token_not_valid"

    OrderCreate201:
      description: "Order created"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderBase"

    OrderCreate400:
      description: "Order created error"

    OrderList200:
      description: "Order list"
      content:
        application/json:
          schema:
            type: object
            properties:
              links:
                type: object
                properties:
                  next:
                    type: string
                    format: url
                  previous:
                    type: string
                    format: url
              count:
                type: number
              total_pages:
                type: number
              results:
                type: array
                items:
                  $ref: "#/components/schemas/OrderBase"

    Order200:
      description: "Order item"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderBase"

    CategoryCreate201:
      description: "Category created"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CategoryBase"

    CategoryCreate400:
      description: "Category created error"

    CategoryList200:
      description: "Category list"
      content:
        application/json:
          schema:
            type: object
            properties:
              links:
                type: object
                properties:
                  next:
                    type: string
                    format: url
                  previous:
                    type: string
                    format: url
              count:
                type: number
              total_pages:
                type: number
              results:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryBase"

    Category200:
      description: "Category item"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CategoryBase"

    DishCreate201:
      description: "Dish create"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DishBase"

    DishCreate400:
      description: "Dish created error"

    DishList200:
      description: "Dish list"
      content:
        application/json:
          schema:
            type: object
            properties:
              links:
                type: object
                properties:
                  next:
                    type: string
                    format: url
                  previous:
                    type: string
                    format: url
              count:
                type: number
              total_pages:
                type: number
              results:
                type: array
                items:
                  $ref: "#/components/schemas/DishBase"

    Dish200:
      description: "Dish item"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DishBase"

    DishImageCreate201:
      description: "Dish image create"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DishImageBase"

    DishImageCreate400:
      description: "Dish image created error"

    DishImages200:
      description: "Dish image get"
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DishImageBase"
