version: '3'

volumes:
  postgres_data:

services:
  nginx:
    image: ghcr.io/emenu124ru/nginx:latest
    container_name: nginx
    restart: always
    depends_on:
      - django
      - daphne
      - swagger-ui
      - certbot
      - alexandria
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./server/media:/nginx/media/
      - ./certbot/conf:/etc/letsencrypt
    environment:
      - BACKEND_DOMAIN=${BACKEND_DOMAIN}

  daphne:
    image: ghcr.io/emenu124ru/django:latest
    restart: always
    depends_on:
      - postgres
      - redis
    expose:
      - 8008
    deploy:
      mode: replicated
      replicas: ${DAPHNE_REPLICAS}
    volumes:
      - ./server/media:/server/media/
      - ./server/logs/:/server/logs/
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - REDIS_URL=${REDIS_URL}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_ADMIN_URL=${DJANGO_ADMIN_URL}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - SERVER_HOST=${SERVER_HOST}
    command: daphne -b 0.0.0.0 -p 8008 config.asgi:application --access-log ./logs/daphne.log -v 3

  django:
    image: ghcr.io/emenu124ru/django:latest
    restart: always
    depends_on:
      - postgres
      - redis
    expose:
      - 8000
    deploy:
      mode: replicated
      replicas: ${DJANGO_REPLICAS}
    volumes:
      - ./server/media:/server/media/
      - ./server/logs/:/server/logs/
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_ADMIN_URL=${DJANGO_ADMIN_URL}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - SERVER_HOST=${SERVER_HOST}
    command: gunicorn config.wsgi -c ./config/gunicorn.py

  redis:
    image: redis:6
    container_name: redis
    restart: always
    expose:
      - 6379

  postgres:
    image: postgres:14.4
    container_name: postgres
    restart: always
    expose:
      - ${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./dumps:/dumps
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}

  postgres-backup:
    image: rmiddle/pg_dump:latest
    container_name: postgres-backup
    restart: always
    links:
      - postgres
    environment:
      - PGUSER=${POSTGRES_USER}
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGDB=${POSTGRES_DB}
      - PGHOST=${POSTGRES_HOST}
      - CRON_SCHEDULE=0 0 * * 0
      - DELETE_OLDER_THAN=3
    volumes:
      - ./dumps:/dump
    command: dump-cron

  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger-ui
    expose:
      - 5050
    volumes:
      - ./docs/openapi.yaml:/openapi.yaml
    environment:
      - SWAGGER_JSON=/openapi.yaml
      - PORT=5050

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/etc/letsencrypt --expand --agree-tos --no-eff-email -d ${BACKEND_DOMAIN}

  alexandria:
    image: raisultan/alexandria:0.1
    container_name: alexandria
    restart: always
    expose:
      - 8080
    volumes:
      - ./docs/ws.yml:/ws.yml
    environment:
      - ALEXANDRIA_YAML=/ws.yml
